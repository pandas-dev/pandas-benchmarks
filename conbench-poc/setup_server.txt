Installing on the server

Connect to server as ssh ubuntu@57.128.112.95

sudo apt update
sudo apt upgrade

sudo apt install make

Install Docker engine: (installed for ubuntu Lunar 23.04):
https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository

To install Docker, “sudo” was used, it would then be needed to run Docker with sudo.
As user bench, I don’t have the rights to use “sudo”. But

I connected as user “ubuntu”, but conbench needs to be installed as user “bench”

So user “bench” needs to be added to group docker, this way I don’t need to use “sudo”:

Do this as user ubuntu:

To see a list of groups:
cat /etc/group 

To add “bench” user to group docker:
sudo adduser bench docker

Change user to “bench”
sudo su - bench

From now on, do everything as user “bench”:
mkdir conbench
cd conbench

Install mamba with: https://github.com/conda-forge/miniforge

curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
bash Miniforge3-$(uname)-$(uname -m).sh

(hit escape or q and then yes)

Exit bench user and login again with sudo su - bench (so mamba is activated)

Enter this so the environment base is not activated all the time you login:

conda config --set auto_activate_base false

Create environment:

mamba create -n conbench-env
mamba activate conbench-env
mamba install python
python -m pip install 'benchadapt@git+https://github.com/conbench/conbench.git@main#subdirectory=benchadapt/python'
python -m pip install 'benchalerts@git+https://github.com/conbench/conbench.git@main#subdirectory=benchalerts'
python -m pip install 'benchclients@git+https://github.com/conbench/conbench.git@main#subdirectory=benchclients/python'
python -m pip install 'benchconnect@git+https://github.com/conbench/conbench.git@main#subdirectory=benchconnect'

mamba install numpy python-dotenv pandas

environment is in:
/home/bench/miniforge3/conbench-env/

Clone my conbench version in branch “server”
git clone https://github.com/DeaMariaLeon/conbench.git

Or 

From conbench repository, and then edit Makefile, docker-compose.yml and conbench/api/index.py

Edit Makefile in order to use port 5000 on server: USE BRANCH “server” 

cd conbench/conbench (where the conbench clone is):

Go to line 13 an change 
export DCOMP_CONBENCH_HOST_PORT=127.0.0.1:5000

to:
export DCOMP_CONBENCH_HOST_PORT=0.0.0.0:5000

Edit docker-compose.yml
line 15 - APPLICATION_NAME: "pandas-conbench-PoC"
line 42 - REGISTRATION_KEY: “innocent-registration-key" CHANGE THIS 

At the end of the file, in order to use volumes:

db:
    image: library/postgres:15.2-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1::5432"
volumes:
  db-data:

Edit conbench/api/index.py line 209 so the database can’t be cleaned up: 
#empty_db_tables()

Clone my repo conbench_toy

git clone https://github.com/DeaMariaLeon/conbench.git

ADD machine.json and benchmarks.json with its path, to this file:
asv_processed_files_server

Provide environment variables:
touch server_env.yml

Edit server_env.yml and set up these variables:

CONBENCH_URL=http://0.0.0.0:5000
CONBENCH_EMAIL=“set-your-email”
CONBENCH_PASSWORD=“set-your-password”   -THIS IS MINE, when I sign up
CONBENCH_RUN_REASON=commit
PANDAS_ASV_RESULTS_PATH= Path to asv .json files
BENCHMARKS_FILE_PATH= Path to a file called benchmarks.json generated by asv
ASV_PROCESSED_FILES= Path and name to file that stores file names posted to web app
ALERT_PROCESSED_FILES= Path and name to file that stores file names analyzed by alert
REPOSITORY=git@github.com:pandas-dev/pandas
GITHUB_REPOSITORY=DeaMariaLeon/algos2 #temporary used for alerts
SLACK_TOKEN=
GMAIL_PASSWORD= Password of email account that sends alerts
GITHUB_APP_ID= Alerts app
GITHUB_APP_PRIVATE_KEY= For alerts app

Set the GITHUB_API_TOKEN:
Run export GITHUB_API_TOKEN="{token}" in your current shell.

Run the following inside conbench/conbench (The root of conbench clone):

Use nohup so it keeps running:

nohup command >/dev/null 2>&1 & # runs in background, still doesn't create nohup.

nohup make run-app 2>&1 &  this is no hungup

You can see nohup.out to see the logs - look for 200, when this happens the conbench server should be running.

At that point open conbench server and create an account. Use the values of server_env.yml for that. 
Once you have registered an account, you need to login. 

Use this to:

make teardown-app - TO REMOVE CONTAINER
make run-app TO RUN - YOU NEED TO BE IN ~/conbench/conbench-clone/  THIS HUNGS UP ON YOU

Under subdirectory conbench/conbench_toy, make sure your environment is activated. 
Run client.py with nohup:

nohup python3 client.py 2>&1 & 

The last file should send all the asv results files to conbench server.

To run the alerts:
nohup python3 alerts.py

Make sure you have two files: alert_processed_files_server and asv_processed_files_server.
The web app, client.py and alerts.py run separately. 
